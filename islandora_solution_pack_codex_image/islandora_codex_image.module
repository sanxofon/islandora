<?php

/**
 * @file
 * Hooks and callbacks for this module.
 */

/**
 * Implements hook_menu().
 */
function islandora_codex_image_menu() {
  $items = array();
  $items['admin/islandora/solution_pack_config/codex_image'] = array(
    'title' => 'Codex Images',
    'description' => 'Define ingest behavior, and select viewer image viewer.',
    'page callback' => 'drupal_get_form',
    'access arguments' => array('administer site configuration'),
    'page arguments' => array('islandora_codex_image_admin'),
    'file' => 'includes/admin.form.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['islandora/object/%islandora_object/description'] = array(
            'title' => 'Description',
            'type' => MENU_LOCAL_TASK,
            'page callback' => 'islandora_codex_image_description_display',
            'page arguments' => array(2),
            'access callback' => 'islandora_codex_image_description_access',
            'access arguments' => array(2),
            );
  return $items;
}

/**
 * Implememts hook_islandora_solr_primary_display().
 */
function islandora_codex_image_islandora_solr_primary_display() {
  return array(
    'piggyback' => array(
      'name' => t('Search results according to the codex image module'),
      'module' => 'islandora_codex_image',
      'file' => 'includes/custom_solr_results.inc',
      'class' => 'PiggyBackSolrPrimaryResults',
      'function' => 'displayResults',
      'description' => t('A demo search results modification'),
      //'configuration' => 'path/to/configuration/page',
    ),
  );
}


/**
 * Determines whether or not to show this modules piggyback view tab.
 *
 * The tab and it's callback are defined in the islandora_piggyback_menu
 *
 * We check it's cmodel here so that we do not try to display this tab for all
 * objects.  We could also call other functions from here to help us determine
 * if we are allowed to show the tab
 *
 * @param IslandoraObject $islandora_object
 *   An Islandora object
 *
 * @return bool
 *   TRUE if we are allowed to show the tab for the corresponding object
 */
function islandora_codex_image_description_access($islandora_object) {
  if (!isset($islandora_object)) {
    return FALSE;
  }
  $models = $islandora_object->models;
  if (array_intersect(array('islandora:sp_codex_image_cmodel'), $models)) {
    return TRUE;
  }
  if (array_intersect(array('islandora:codexbookCModel'), $models)) {
    return TRUE;
  }
  return FALSE;
}

/**
 * This is the callback function defined in the menu array of this module.
 *
 * This function will be called if our islandora_piggyback_access check returns true
 * we call another theme function here which also invokes the desired preprocessor
 *
 * @param IslandoraObject $islandora_object
 *   an islandora object
 *
 * @return string
 *   the rendered output
 */
function islandora_codex_image_description_display($object) {
    // Load the variables we need.
        $dsid = 'DC';
        $query = '//dc:description';
    // Create a form array.
        $output = array();
    // Create the fieldset title for the array.
        $output['title'] = array(
            '#type' => 'fieldset',
            '#title' => t('Description'),
            '#collapsible' => FALSE,
            );
    // Load the object we want.
        $object = islandora_object_load($object);
    // Check if the object has the specified datastream.
        if (isset($object[$dsid])) {
    // If it does, load the datastream as XML.
            $mods = simplexml_load_string($object[$dsid]->content);
    // Do the Xpath query for the abstract.
            $abstract = $mods->xpath($query);
    // If we find something, stick it in the title fieldset as markup. If we
    // don't, just display a message saying it wasn't there.
            $output['title']['description'] = array(
                '#markup' => isset($abstract[0]) ? (string) $abstract[0] : "No $dsid description metadata found for this object.",
                );
        }
    // If there is no specified datastream, put that in the description instead.
        else {
            $output['title']['description'] = array(
                '#markup' => "No $dsid metadata was found for this object.",
                );
        }
        return $output;
    }



/**
 * Implements hook_theme().
 *
 * We supply a pattern so we can overide templates at the theme level if needed.
 * we can append a pid to a template and the new template file will be called
 * (the pids colon should be replaced with a dash).
 */
function islandora_codex_image_theme($existing, $type, $theme, $path) {
  return array(
    'islandora_codex_image' => array(
      'template' => 'theme/islandora-codex-image',
      // We can add pids to the end of this pattern in our preprocess function
      // and templates will be able to have have a pid appended to the template
      // name to overide a template on a per object basis. An example template
      // would be named islandora-basic-image--islandora-27.tpl.phps.
      'pattern' => 'islandora_codex_image__',
      'variables' => array('islandora_object' => NULL),
    ),
    'islandora_codex_image_print' => array(
      'template' => 'theme/islandora-codex-image-print',
      'variables' => array('islandora_content' => NULL),
    ),
  );
}

/**
 * Implements hook_islandora_view_print_object().
 */
function islandora_codex_image_islandora_view_print_object($object) {
  $output = array();
  if (in_array('islandora:sp_codex_image_cmodel', $object->models)) {
    $resource_url = url("islandora/object/{$object->id}/datastream/JPG/view");
    $params = array(
      'title' => $object->label,
      'path' => $resource_url,
    );

    // Theme the image seperatly.
    $variables['islandora_img'] = theme('image', $params);
    $output = theme('islandora_codex_image_print', array(
      'islandora_content' => $variables['islandora_img']));
  }

  return $output;
}
/**
 * Implements hook_islandora_required_objects().
 */
function islandora_codex_image_islandora_required_objects(IslandoraTuque $connection) {
  $module_path = drupal_get_path('module', 'islandora_codex_image');
  // Large Image Content Model.
  $codex_image_content_model = $connection->repository->constructObject('islandora:sp_codex_image_cmodel');
  $codex_image_content_model->owner = 'fedoraAdmin';
  $codex_image_content_model->label = 'Islandora Codex Image Content Model';
  $codex_image_content_model->models = 'fedora-system:ContentModel-3.0';
  // DS-COMPOSITE-MODEL Datastream.
  $datastream = $codex_image_content_model->constructDatastream('DS-COMPOSITE-MODEL', 'X');
  $datastream->label = 'DS-COMPOSITE-MODEL';
  $datastream->mimetype = 'text/xml';
  $datastream->setContentFromFile("$module_path/xml/islandora_codex_image_ds_composite_model.xml", FALSE);
  $codex_image_content_model->ingestDatastream($datastream);
  // Large Image Collection.
  $codex_image_collection = $connection->repository->constructObject('islandora:sp_codex_image_collection');
  $codex_image_collection->owner = 'fedoraAdmin';
  $codex_image_collection->label = 'Codex Image Collection';
  $codex_image_collection->models = 'islandora:collectionCModel';
  $codex_image_collection->relationships->add(FEDORA_RELS_EXT_URI, 'isMemberOfCollection', 'islandora:root');
  // Collection Policy Datastream.
  $datastream = $codex_image_collection->constructDatastream('COLLECTION_POLICY', 'X');
  $datastream->label = 'Collection policy';
  $datastream->mimetype = 'text/xml';
  $datastream->setContentFromFile("$module_path/xml/islandora_codex_image_collection_policy.xml", FALSE);
  $codex_image_collection->ingestDatastream($datastream);
  // TN Datastream.
  $datastream = $codex_image_collection->constructDatastream('TN', 'M');
  $datastream->label = 'Thumbnail';
  $datastream->mimetype = 'image/png';
  $datastream->setContentFromFile("$module_path/images/folder.png", FALSE);
  $codex_image_collection->ingestDatastream($datastream);
  return array(
    'islandora_codex_image' => array(
      'title' => 'Islandora codex image',
      'objects' => array(
        $codex_image_content_model,
        $codex_image_collection,
      ),
    ),
  );
}

/**
 * Implements hook_islandora_xml_form_builder_forms().
 */
function islandora_codex_image_islandora_xml_form_builder_forms() {
  $module_path = drupal_get_path('module', 'islandora_codex_image');
  return array(
    'Codex image MODS form' => array(
      'form_file' => "$module_path/xml/islandora_codex_image_form_mods.xml",
    ),
  );
}

/**
 * Implements hook_islandora_content_model_forms_form_associations().
 */
function islandora_codex_image_islandora_content_model_forms_form_associations() {
  return array(
    'islandora_codex_image_mods_form' => array(
      'content_model' => 'islandora:sp_codex_image_cmodel',
      'form_name' => 'Codex image MODS form',
      'dsid' => 'MODS',
      'title_field' => array('titleInfo', 'title'),
      'transform' => 'mods_to_dc.xsl',
      'template' => FALSE,
    ),
  );
}

/**
 * Implements hook_CMODEL_PID_islandora_view_object().
 */
function islandora_codex_image_islandora_sp_codex_image_cmodel_islandora_view_object($object, $page_number, $page_size) {
  $output = theme('islandora_codex_image', array('islandora_object' => $object));
  return array('' => $output);
}

/**
 * Implements hook_preprocess().
 */
function islandora_codex_image_preprocess_islandora_codex_image(&$variables) {
  drupal_add_js('misc/form.js');
  drupal_add_js('misc/collapse.js');
  $islandora_object = $variables['islandora_object'];
  $repository = $islandora_object->repository;
  module_load_include('inc', 'islandora', 'includes/datastream');
  module_load_include('inc', 'islandora', 'includes/utilities');
  module_load_include('inc', 'islandora', 'includes/metadata');

  // We should eventually remove the DC object and dc_array code as it only
  // exists to not break legacy implementations.
  if (isset($islandora_object['DC']) && islandora_datastream_access(ISLANDORA_VIEW_OBJECTS, $islandora_object['DC'])) {
    try {
      $dc = $islandora_object['DC']->content;
      $dc_object = DublinCore::importFromXMLString($dc);
    }
    catch (Exception $e) {
      $variables = array(
        '@ret' => $e->getMessage(),
        '@trace' => $e->getTraceAsString(),
      );
      watchdog('islandora_codex_image', 'Error retrieving object.<br/>Error: @ret<br/>Trace: @trace', $variables, WATCHDOG_ERROR);
      drupal_set_message(t('Error retrieving object %s %t', array('%s' => $islandora_object->id, '%t' => $e->getMessage())), 'error', FALSE);
    }
  }
  $variables['islandora_dublin_core'] = isset($dc_object) ? $dc_object : NULL;
  $variables['dc_array'] = isset($dc_object) ? $dc_object->asArray() : array();
  $variables['islandora_object_label'] = $islandora_object->label;
  $variables['theme_hook_suggestions'][] = 'islandora_codex_image__' . str_replace(':', '_', $islandora_object->id);
  $variables['parent_collections'] = islandora_get_parents_from_rels_ext($islandora_object);
  $variables['metadata'] = islandora_retrieve_metadata_markup($islandora_object);
  $variables['description'] = islandora_retrieve_description_markup($islandora_object);

  // Thumbnail.
  if (isset($islandora_object['TN']) && islandora_datastream_access(ISLANDORA_VIEW_OBJECTS, $islandora_object['TN'])) {
    $params = array(
      'title' => $islandora_object->label,
      'path' => url("islandora/object/{$islandora_object->id}/datastream/TN/view"),
    );
    $variables['islandora_thumbnail_img'] = theme('image', $params);
  }
  module_load_include('inc', 'islandora', 'includes/solution_packs');

  $params = array();

  if (isset($islandora_object['JP2']) && islandora_datastream_access(ISLANDORA_VIEW_OBJECTS, $islandora_object['JP2'])) {
    // Get token to allow access to XACML protected datastreams.
    // Always use token authentication in case there is a global policy.
    module_load_include('inc', 'islandora', 'includes/authtokens');
    $token = islandora_get_object_token($islandora_object->id, 'JP2', 2);
    $jp2_url = url("islandora/object/{$islandora_object->id}/datastream/JP2/view",
      array(
        'absolute' => TRUE,
        'query' => array('token' => $token),
      ));
    // Display large image.
    $params['jp2_url'] = $jp2_url;
  }

  $viewer = islandora_get_viewer($params, 'islandora_codex_image_viewers', $islandora_object);
  $variables['islandora_content'] = '';
  if ($viewer) {
    if (strpos($viewer, 'islandora-openseadragon') !== FALSE) {
      if (isset($islandora_object['JP2']) && islandora_datastream_access(ISLANDORA_VIEW_OBJECTS, $islandora_object['JP2'])) {
        $variables['image_clip'] = theme(
          'islandora_openseadragon_clipper',
          array('pid' => $islandora_object->id)
        );
      }
    }
    $variables['islandora_content'] = $viewer;
  }
  // If no viewer is configured just show the jpeg.
  elseif (isset($islandora_object['JPG']) && islandora_datastream_access(ISLANDORA_VIEW_OBJECTS, $islandora_object['JPG'])) {
    $params = array(
      'title' => $islandora_object->label,
      'path' => url("islandora/object/{$islandora_object->id}/datastream/JPG/view"),
    );
    $variables['islandora_content'] = theme('image', $params);
  }
  else {
    $variables['islandora_content'] = NULL;
  }
}

/**
 * Implements hook_islandora_ingest_steps().
 */
function islandora_codex_image_islandora_sp_codex_image_cmodel_islandora_ingest_steps() {
  return array(
    'islandora_codex_image_upload' => array(
      'weight' => 10,
      'type' => 'form',
      'form_id' => 'islandora_codex_image_image_upload_form',
      'module' => 'islandora_codex_image',
      'file' => 'includes/image_upload.form.inc',
    ),
  );
}

/**
 * Implements hook_process_theme().
 */
function islandora_codex_image_preprocess_islandora_object_print(array &$variables) {
  $object = $variables['object'];
  if (in_array('islandora:sp_codex_image_cmodel', $object->models)) {
    $url = url("islandora/object/{$object->id}", array('absolute' => TRUE));
    $variables['content']['link'] = array(
      '#weight' => -10,
      '#markup' => t('Persistent link: !link', array("!link" => l($url, $url))),
    );
  }
}

/**
 * Implements hook_process_theme().
 */
function islandora_codex_image_process_islandora_object_print(array &$variables) {
  $object = $variables['object'];
  if (in_array('islandora:sp_codex_image_cmodel', $object->models)) {
    $clip = isset($variables['clip']) ? $variables['clip'] : NULL;
    $variables['content']['buttons'] = array(
      '#access' => isset($clip),
      '#prefix' => '<div>',
      '#suffix' => '</div></br>',
      '#weight' => -5,
      'print' => array(
        '#prefix' => '<strong>',
        '#markup' => l(t('Print'), 'javascript:window.print();', array('external' => TRUE)),
        '#suffix' => '</strong>',
        '#weight' => -5,
      ),
      '0' => array(
        '#markup' => ' | ',
        '#weight' => -5,
      ),
      'download_clip' => array(
        '#prefix' => '<strong>',
        '#markup' => l(t('Download Image'), "islandora/object/{$object->id}/download_clip", array(
                     'query' => array('clip' => $clip))),
        '#suffix' => '</strong>',
        '#weight' => -5,
      ),
    );
  }
}

/**
 * Implements hook_CMODEL_islandora_derivative().
 */
function islandora_codex_image_islandora_sp_codex_image_cmodel_islandora_derivative() {
  $mod_path = drupal_get_path('module', 'islandora_codex_image');

  return array(
    array(
      'source_dsid' => 'OBJ',
      'destination_dsid' => 'TN',
      'weight' => 0,
      'function' => array(
        'islandora_codex_image_create_tn_derivative',
      ),
      'file' => "$mod_path/includes/derivatives.inc",
    ),
    array(
      'source_dsid' => 'OBJ',
      'destination_dsid' => 'JPG',
      'weight' => 1,
      'function' => array(
        'islandora_codex_image_create_jpg_derivative',
      ),
      'file' => "$mod_path/includes/derivatives.inc",
    ),
    array(
      'source_dsid' => 'OBJ',
      'destination_dsid' => 'JP2',
      'weight' => 2,
      'function' => array(
        'islandora_codex_image_create_jp2_derivative',
      ),
      'file' => "$mod_path/includes/derivatives.inc",
    ),
  );
}
